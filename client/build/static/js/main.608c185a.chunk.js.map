{"version":3,"sources":["store/api/ListApi.js","store/constants/ListTypes.js","store/actions/ListActions.js","store/api/TodoApi.js","store/constants/TodoTypes.js","store/actions/TodoActions.js","components/list/ListTable.jsx","components/list/TodoListForm.jsx","components/todos/TodoForm.jsx","components/todos/TodoTable.jsx","components/home/Home.jsx","App.js","reportWebVitals.js","store/Store.js","store/reducers/ListReducer.js","store/reducers/TodoReducer.js","store/reducers/TodoIdReducer.js","store/reducers/TodoDataUpdateId.js","store/reducers/ListIdReducer.js","index.js"],"names":["url","createList","newList","axios","post","updateList","id","updatedList","patch","deleteList","delete","GET_LIST","CREATE_LIST","UPDATE_LIST","DELETE_LIST","updateListId","type","payload","fetchTodos","get","createTodo","newTodo","updateTodo","updatedTodo","updateTodoStatus","deleteTodo","GET_TODO","CREATE_TODO","UPDATE_TODO","UPDATE_TODO_STATUS","DELETE_TODO","TODO_ID","TODO_DATA_UPDATE_ID","todoDataUpdateId","ListTable","useState","listId","setListId","todoId","setTodoId","dispatch","useDispatch","lists","useSelector","state","useEffect","Fragment","Table","className","striped","hover","size","map","list","_id","onClick","name","a","api","console","log","TodoListForm","todos","setList","currentUpdateListId","listUpdateId","updateListData","find","clear","Form","method","onSubmit","e","preventDefault","data","Stack","direction","gap","Control","value","onChange","target","placeholder","Button","variant","TodoForm","list_id","title","date","status","todo","setTodo","currentUpdateTodoId","TodoUpdateId","currentTodoDataUpdateId","TodoDataUpdateId","todoDataUpdate","TodoTable","todoDataUpdateIdState","setTodoDataUpdateIdState","Home","myTodos","Container","Row","Col","lg","md","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","filter","updateTodoId","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","Store","document","getElementById"],"mappings":"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","file":"static/js/main.608c185a.chunk.js","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nconst url = 'http://localhost:5000/lists';\r\n\r\nexport const fetchLists = () => axios.get(url);\r\n\r\nexport const createList = (newList) => axios.post(url, newList);\r\n\r\nexport const updateList = (id, updatedList) => axios.patch(`${url}/${id}`, updatedList);\r\n\r\nexport const deleteList = (id) => axios.delete(`${url}/${id}`);\r\n\r\n","export const GET_LIST = 'GET_LIST';\r\nexport const CREATE_LIST = 'CREATE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const UPDATE_LIST_ID = 'UPDATE_LIST_ID';\r\n","import * as api from '../api/ListApi';\r\n\r\nimport { GET_LIST, CREATE_LIST, UPDATE_LIST, DELETE_LIST, UPDATE_LIST_ID } from '../constants/ListTypes';\r\n\r\n//action creators\r\n    //get lists\r\n    export const getList = () => async (dispatch) => {\r\n        try{\r\n            const { data } = await api.fetchLists();\r\n            dispatch({ type: GET_LIST, payload: data });\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    export const createList = (newList) => async (dispatch) => {\r\n        try{\r\n            const { data } = await api.createList(newList);\r\n            dispatch({ type: CREATE_LIST, payload: data });\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    export const updateList = (id, updatedList) => async (dispatch) => {\r\n        try{\r\n            const { data } = await api.updateList(id, updatedList);\r\n            dispatch({ type: UPDATE_LIST, payload: data });\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    export const deleteList = (id) => async (dispatch) => {\r\n        try{\r\n            await api.deleteList(id);\r\n            dispatch({ type: DELETE_LIST, payload: id });\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //update list edit id\r\n    export const updateListId = (id) => {\r\n        return { \r\n            type: UPDATE_LIST_ID, \r\n            payload: id \r\n        }\r\n    }   ","\r\nimport axios from 'axios';\r\n\r\nconst url = 'http://localhost:5000/todos';\r\n\r\nexport const fetchTodos = (id) => axios.get(`${url}/${id}`);\r\n\r\nexport const createTodo = (newTodo) => axios.post(url, newTodo);\r\n\r\nexport const updateTodo = (id, updatedTodo) => axios.patch(`${url}/${id}`, updatedTodo);\r\n\r\nexport const updateTodoStatus = (id) => axios.patch(`${url}/status/${id}`);\r\n\r\nexport const deleteTodo = (id) => axios.delete(`${url}/${id}`);\r\n\r\n","export const GET_TODO = 'GET_TODO';\r\nexport const CREATE_TODO = 'CREATE_TODO';\r\nexport const UPDATE_TODO = 'UPDATE_TODO';\r\nexport const UPDATE_TODO_STATUS = 'UPDATE_TODO_STATUS';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const TODO_ID = 'TODO_ID';\r\nexport const TODO_DATA_UPDATE_ID = 'TODO_DATA_UPDATE_ID';\r\n","import * as api from '../api/TodoApi';\r\n\r\nimport { GET_TODO, CREATE_TODO, UPDATE_TODO, UPDATE_TODO_STATUS, DELETE_TODO, TODO_ID, TODO_DATA_UPDATE_ID } from '../constants/TodoTypes';\r\n\r\n//get todos\r\nexport const getTodo = (id) => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.fetchTodos(id);\r\n        dispatch({ type: GET_TODO, payload: data });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const createTodo = (newTodo) => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.createTodo(newTodo);\r\n        dispatch({ type: CREATE_TODO, payload: data });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updateTodo = (id, updatedTodo) => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.updateTodo(id, updatedTodo);\r\n        dispatch({ type: UPDATE_TODO, payload: data });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updateTodoStatus = (id) => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.updateTodoStatus(id);\r\n        dispatch({ type: UPDATE_TODO_STATUS, payload: data });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const deleteTodo = (id) => async (dispatch) => {\r\n    try{\r\n        await api.deleteTodo(id);\r\n        dispatch({ type: DELETE_TODO, payload: id });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//update todo edit id\r\nexport const updateTodoId = (id) => {\r\n    return { \r\n        type: TODO_ID, \r\n        payload: id \r\n    }\r\n}   \r\n\r\n\r\n//update todo data id\r\nexport const todoDataUpdateId = (id) => {\r\n    return { \r\n        type: TODO_DATA_UPDATE_ID, \r\n        payload: id \r\n    }\r\n}   ","import React, { useEffect, useState } from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { deleteList, updateListId } from '../../store/actions/ListActions';\r\nimport { updateTodoId } from '../../store/actions/TodoActions';\r\n\r\nconst ListTable = () => {\r\n    const [listId, setListId] = useState(null);\r\n    const [todoId, setTodoId] = useState(null);\r\n    const dispatch = useDispatch();\r\n    \r\n    const lists = useSelector((state) => state.lists);\r\n\r\n    \r\n    //update list edit id\r\n    useEffect(() => {\r\n        dispatch(updateListId(listId));\r\n    }, [listId, dispatch]);\r\n    \r\n    useEffect(() => {\r\n        dispatch(updateTodoId(todoId))\r\n    }, [todoId, dispatch]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Table className=\"list-table\" striped hover size=\"sm\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {lists && lists.map((list) => (\r\n                    <tr key={list._id} className={todoId===list._id ? 'selectedList' : ''}>\r\n                        <td onClick={() => setTodoId(list._id) } className=\"cursor-pointer\">{list.name}</td>\r\n                        <td><FaEdit className=\"cursor-pointer\" onClick={ () => setListId(list._id) } /></td>\r\n                        <td><FaTrashAlt className=\"cursor-pointer\" onClick={() => dispatch(deleteList(list._id)) }/></td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </Table>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ListTable\r\n","import React, { useState, useEffect } from 'react'\r\nimport Stack from 'react-bootstrap/Stack'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { updateListId, createList, updateList } from '../../store/actions/ListActions';\r\n\r\nconst TodoListForm = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [list, setList] = useState({\r\n        name: '',\r\n        todos: [],\r\n    });\r\n\r\n    const currentUpdateListId = useSelector((state) => state.listUpdateId);\r\n    const updateListData = useSelector((state) => currentUpdateListId!==null ? state.lists.find((list) => list._id === currentUpdateListId) : null);\r\n\r\n    //set local state list \r\n    useEffect(() => {\r\n        if(updateListData) setList(updateListData);\r\n    }, [updateListData]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(list.name){\r\n            if(currentUpdateListId!==null){\r\n                dispatch(updateList(currentUpdateListId, list));\r\n            }else{\r\n                dispatch(createList(list));\r\n            }\r\n            clear();\r\n        }\r\n    }\r\n    \r\n    const clear = () => {\r\n        dispatch(updateListId(null));\r\n        setList({\r\n            name: '',\r\n            todos: [],\r\n        });\r\n    }\r\n        \r\n    return (\r\n        <React.Fragment>\r\n            <Form method=\"post\" onSubmit={handleSubmit}>\r\n                <Stack direction=\"horizontal\" gap={3}>\r\n                    <Form.Control className=\"me-auto\" value={list.name} onChange={(e) => setList({...list, name: e.target.value})} placeholder=\"Enter The Name of List\" />\r\n                    <Button variant=\"primary\" type=\"submit\">{ currentUpdateListId ? 'Update' : 'Add' }</Button>\r\n                </Stack>\r\n            </Form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TodoListForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport Stack from 'react-bootstrap/Stack'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { todoDataUpdateId, createTodo, updateTodo } from '../../store/actions/TodoActions';\r\n\r\nconst TodoForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [todo, setTodo] = useState({\r\n        list_id: null,\r\n        title: '',\r\n        date: '',\r\n        status:false\r\n    });\r\n\r\n    const currentUpdateTodoId = useSelector((state) => state.TodoUpdateId);\r\n\r\n    //update data of todos    \r\n    const currentTodoDataUpdateId = useSelector((state) => state.TodoDataUpdateId);\r\n    const todoDataUpdate = useSelector((state) => currentTodoDataUpdateId!==null ? state.todos.find((todo) => todo._id === currentTodoDataUpdateId) : null);\r\n    \r\n    //set local todo update data \r\n    useEffect(() => {\r\n        if(todoDataUpdate) setTodo(todoDataUpdate);\r\n    }, [todoDataUpdate]);\r\n\r\n    useEffect(() => {\r\n        setTodo({...todo, list_id: currentUpdateTodoId});\r\n    }, [currentUpdateTodoId])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(todo.title && todo.date){\r\n            if(currentTodoDataUpdateId!==null){\r\n                dispatch(updateTodo(currentTodoDataUpdateId, todo));\r\n            }else{\r\n                dispatch(createTodo(todo));\r\n            }\r\n            clear();\r\n        }\r\n    }\r\n    \r\n    const clear = () => {\r\n        dispatch(todoDataUpdateId(null));\r\n        setTodo({\r\n            list_id: null,\r\n            title: '',\r\n            date: '',\r\n            status:false\r\n        });\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"ms-4\">\r\n                {currentUpdateTodoId &&\r\n                <Form method=\"post\" onSubmit={handleSubmit}>\r\n                    <Stack direction=\"horizontal\" gap={3}>\r\n                        <Form.Control className=\"me-auto\" value={todo.title} onChange={ (e) => setTodo({...todo, title: e.target.value})} placeholder=\"Enter Title\" />\r\n                        {!currentTodoDataUpdateId && <Form.Control className=\"me-auto\" value={todo.date} onChange={ (e) => setTodo({...todo, date: e.target.value})} type=\"date\" /> }\r\n                        <Button variant=\"primary w-2\" className=\"todo-btn\" type=\"submit\">{currentTodoDataUpdateId ? 'Update' : 'Add' } Todo</Button>\r\n                    </Stack>\r\n                </Form>\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport { FaCheck } from \"react-icons/fa\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTodo } from '../../store/actions/TodoActions';\r\nimport { todoDataUpdateId, deleteTodo, updateTodoStatus } from '../../store/actions/TodoActions';\r\n\r\nconst TodoTable = ({todos}) => {\r\n    const dispatch = useDispatch();\r\n    const [todoDataUpdateIdState, setTodoDataUpdateIdState] = useState(null)    \r\n    const currentUpdateTodoId = useSelector((state) => state.TodoUpdateId);\r\n\r\n    //update todo date update id\r\n    useEffect(() => {\r\n        dispatch(todoDataUpdateId(todoDataUpdateIdState));\r\n    }, [dispatch, todoDataUpdateIdState]);\r\n    \r\n    useEffect(() => {\r\n        if(currentUpdateTodoId) {\r\n            dispatch(getTodo(currentUpdateTodoId));\r\n        }\r\n    }, [dispatch, currentUpdateTodoId])\r\n    return (\r\n        <React.Fragment>\r\n            {currentUpdateTodoId &&\r\n            <Table className=\"list-table mx-4\" striped hover size=\"sm\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Status</th>\r\n                    <th>Title</th>\r\n                    <th>Date</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                \r\n                {todos && todos.map((todo) => (\r\n                    <tr key={todo._id}>\r\n                    <td onClick={() => dispatch(updateTodoStatus(todo._id))}>{todo.status ? <FaCheck className=\"cursor-pointer\" /> : <FaTimes className=\"cursor-pointer\" />}</td>\r\n                    <td>{todo.title}</td>\r\n                    <td>{todo.date}</td>\r\n                    <td><FaEdit onClick={ () => setTodoDataUpdateIdState(todo._id) } className=\"cursor-pointer\" /></td>\r\n                    <td><FaTrashAlt  onClick={() => dispatch(deleteTodo(todo._id)) } className=\"cursor-pointer\" /></td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </Table>            \r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TodoTable\r\n","import React, { useEffect } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ListTable from '../list/ListTable'\r\nimport TodoListForm from '../list/TodoListForm'\r\nimport TodoForm from '../todos/TodoForm'\r\nimport TodoTable from '../todos/TodoTable'\r\nimport { getList } from '../../store/actions/ListActions';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const currentUpdateTodoId = useSelector((state) => state.TodoUpdateId);\r\n    const myTodos = useSelector((state) => state.todos);\r\n\r\n    //getting lists\r\n    useEffect(() => {\r\n        dispatch(getList())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2 className=\"title\">Todo List App</h2>\r\n            <Container>\r\n                <Row>\r\n                    <Col lg={4} md={4}>\r\n                        <TodoListForm />\r\n                        <ListTable />\r\n                    </Col>\r\n                    <Col lg={8} md={8}>\r\n                        <TodoForm />\r\n                        {currentUpdateTodoId &&\r\n                            <TodoTable todos={myTodos} />\r\n                        }\r\n                        </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import './App.css';\nimport Home from './components/home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import lists from './reducers/ListReducer' \r\nimport todos from './reducers/TodoReducer' \r\nimport listUpdateId from './reducers/ListIdReducer' \r\nimport TodoUpdateId from './reducers/TodoIdReducer' \r\nimport TodoDataUpdateId from './reducers/TodoDataUpdateId' \r\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst reducers = combineReducers({\r\n    lists,\r\n    todos,\r\n    TodoUpdateId,\r\n    TodoDataUpdateId,\r\n    listUpdateId\r\n});\r\n\r\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\r\n\r\nexport default store \r\n","import { GET_LIST, CREATE_LIST, UPDATE_LIST, DELETE_LIST } from '../constants/ListTypes';\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case GET_LIST:\r\n            return action.payload;\r\n        case CREATE_LIST:\r\n            return [...state, action.payload];\r\n        case UPDATE_LIST:\r\n            return state.map((list) => list._id === action.payload._id ? action.payload : list);\r\n        case DELETE_LIST:\r\n            return state.filter((list) => list._id !== action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}","import { GET_TODO, CREATE_TODO, UPDATE_TODO_STATUS, UPDATE_TODO, DELETE_TODO } from '../constants/TodoTypes';\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case GET_TODO:\r\n            return action.payload;\r\n        case CREATE_TODO:\r\n            return [...state, action.payload];\r\n        case UPDATE_TODO:\r\n            return state.map((todo) => todo._id === action.payload._id ? action.payload : todo);\r\n        case UPDATE_TODO_STATUS:\r\n            return state.map((todo) => todo._id === action.payload._id ? {...todo, status:!todo.status} : todo);\r\n        case DELETE_TODO:\r\n            return state.filter((todo) => todo._id !== action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}","import { TODO_ID } from '../constants/TodoTypes';\r\n\r\nexport default (updateTodoId = null, action) => {\r\n    switch (action.type) {\r\n        case TODO_ID:\r\n                return action.payload;\r\n        default:\r\n            return updateTodoId;\r\n    }\r\n}","import { TODO_DATA_UPDATE_ID } from '../constants/TodoTypes';\r\n\r\nexport default (todoDataUpdateId = null, action) => {\r\n    switch (action.type) {\r\n        case TODO_DATA_UPDATE_ID:\r\n                return action.payload;\r\n        default:\r\n            return todoDataUpdateId;\r\n    }\r\n}","export default (updateListId = null, action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE_LIST_ID':\r\n                return action.payload;\r\n        default:\r\n            return updateListId;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport Store from './store/Store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}